#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Research Assistant
"""

import requests
import json
import time

def test_app():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Research Assistant...")
    
    # –¢–µ—Å—Ç 1: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    try:
        response = requests.get(f"{base_url}/")
        if response.status_code == 200:
            print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—ã
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–æ—Ä–º—ã...")
    try:
        response = requests.get(f"{base_url}/feature")
        if response.status_code == 200:
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞)
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...")
    form_data = {
        "product_description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥",
        "segment": "–§–õ",
        "research_element": "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        "benchmarks": "–°–±–µ—Ä–±–∞–Ω–∫, –¢–∏–Ω—å–∫–æ—Ñ—Ñ",
        "required_players": "Visa, Mastercard",
        "required_countries": "–†–æ—Å—Å–∏—è, –°–®–ê"
    }
    
    try:
        response = requests.post(f"{base_url}/process-feature", data=form_data)
        if response.status_code == 200:
            print("‚úÖ –§–æ—Ä–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞...")
    test_data = {
        "product_description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
        "segment": "–§–õ",
        "research_element": "—Ç–µ—Å—Ç",
        "benchmarks": "",
        "required_players": "",
        "required_countries": ""
    }
    
    try:
        response = requests.post(
            f"{base_url}/generate-report",
            json=test_data,
            headers={"Content-Type": "application/json"}
        )
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print("‚úÖ –û—Ç—á–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ API: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_app()
