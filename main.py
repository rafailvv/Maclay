from fastapi import FastAPI, Request, Form, HTTPException, Depends, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import httpx
import asyncio
import os
import uuid
from dotenv import load_dotenv
import json
from datetime import datetime
from config import config
from database import init_database, get_db, ResearchReport, UserSession
from services import ReportService, SessionManager
from sqlalchemy.orm import Session
import asyncio
from typing import Dict, List, Any
from research_stages import ResearchProcessor

load_dotenv()

app = FastAPI(
    title=config.APP_NAME,
    description=config.APP_DESCRIPTION,
    version=config.APP_VERSION
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# WebSocket connection manager
class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}

    async def connect(self, websocket: WebSocket, client_id: str):
        await websocket.accept()
        self.active_connections[client_id] = websocket

    def disconnect(self, client_id: str):
        if client_id in self.active_connections:
            del self.active_connections[client_id]
            print(f"üîå –ö–ª–∏–µ–Ω—Ç {client_id} –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def cleanup_disconnected(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        disconnected_clients = []
        for client_id, websocket in self.active_connections.items():
            if websocket.client_state.name != "CONNECTED":
                disconnected_clients.append(client_id)
        
        for client_id in disconnected_clients:
            self.disconnect(client_id)
            print(f"üßπ –û—á–∏—â–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {client_id}")

    async def send_message(self, client_id: str, message: dict):
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {message}")
        # –û—á–∏—â–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        self.cleanup_disconnected()
        
        if client_id in self.active_connections:
            try:
                websocket = self.active_connections[client_id]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                if websocket.client_state.name == "CONNECTED":
                    await websocket.send_text(json.dumps(message))
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_id}")
                else:
                    print(f"‚ö†Ô∏è WebSocket –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CONNECTED: {websocket.client_state.name}")
                    self.disconnect(client_id)
            except Exception as e:
                import traceback
                error_details = traceback.format_exc()
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
                print(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ WebSocket:\n{error_details}")
                self.disconnect(client_id)
        else:
            print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö")
            print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {list(self.active_connections.keys())}")

manager = ConnectionManager()

# Initialize database
@app.on_event("startup")
async def startup_event():
    """Initialize database on startup"""
    init_database()
    print("‚úÖ Database initialized")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
config_errors = config.validate_config()
if config_errors:
    print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    for error in config_errors:
        print(f"   - {error}")

@app.get("/", response_class=HTMLResponse)
async def main_page(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/feature", response_class=HTMLResponse)
async def feature_form(request: Request):
    return templates.TemplateResponse("feature_form.html", {"request": request})

@app.get("/product", response_class=HTMLResponse)
async def product_form(request: Request):
    return templates.TemplateResponse("product_form.html", {"request": request})

@app.post("/process-feature")
async def process_feature(
    request: Request,
    product_description: str = Form(...),
    segment: str = Form(...),
    research_element: str = Form(...),
    benchmarks: str = Form(""),
    required_players: str = Form(""),
    required_countries: str = Form(""),
    db: Session = Depends(get_db)
):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    research_data = {
        "product_description": product_description,
        "segment": segment,
        "research_element": research_element,
        "benchmarks": benchmarks,
        "required_players": required_players,
        "required_countries": required_countries
    }
    
    return templates.TemplateResponse("loading.html", {
        "request": request,
        "research_data": research_data
    })

@app.post("/process-product")
async def process_product(
    request: Request,
    product_description: str = Form(...),
    segment: str = Form(...),
    product_characteristics: str = Form(...),
    required_players: str = Form(""),
    required_countries: str = Form(""),
    db: Session = Depends(get_db)
):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    research_data = {
        "product_description": product_description,
        "segment": segment,
        "product_characteristics": product_characteristics,
        "required_players": required_players,
        "required_countries": required_countries
    }
    
    return templates.TemplateResponse("loading.html", {
        "request": request,
        "research_data": research_data
    })

@app.post("/generate-report")
async def generate_report(request: Request, db: Session = Depends(get_db)):
    """Generate report using improved multi-stage process"""
    try:
        # Get data from request
        data = await request.json()
        
        # Extract research data
        product_description = data.get('product_description', '')
        segment = data.get('segment', '')
        research_element = data.get('research_element', '')
        product_characteristics = data.get('product_characteristics', '')
        benchmarks = data.get('benchmarks', '')
        required_players = data.get('required_players', '')
        required_countries = data.get('required_countries', '')
        
        # Determine research type
        research_type = "feature" if research_element else "product"
        
        # Create research data dict
        research_data = {
            "product_description": product_description,
            "segment": segment,
            "research_element": research_element,
            "product_characteristics": product_characteristics,
            "benchmarks": benchmarks,
            "required_players": required_players,
            "required_countries": required_countries
        }
        
        # Get client ID from request or generate new one
        client_id = data.get('client_id', str(uuid.uuid4()))
        
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º client_id: {client_id}")
        
        # Start research processing in background
        asyncio.create_task(process_research_background(research_data, research_type, client_id, db))
        
        return {
            "success": True,
            "client_id": client_id,
            "message": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        }

async def process_research_background(research_data: Dict[str, Any], research_type: str, client_id: str, db: Session):
    """Process research in background with real-time updates"""
    try:
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        
        # Initialize research processor
        processor = ResearchProcessor(config, manager, client_id)
        
        # Process research without timeout
        result = await processor.process_research(research_data, research_type)
        
        if result["success"]:
            # Save report to database
            report_service = ReportService(db)
            
            # Generate session ID
            session_id = str(uuid.uuid4())
            
            # Create report
            if research_type == "feature":
                title = f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∏—á–∏: {research_data.get('research_element', '')[:50]}..."
                report = report_service.create_report(
                    title=title,
                    content=result["report"],
                    research_type="feature",
                    product_description=research_data.get('product_description', ''),
                    segment=research_data.get('segment', ''),
                    research_element=research_data.get('research_element', ''),
                    benchmarks=research_data.get('benchmarks', ''),
                    required_players=research_data.get('required_players', ''),
                    required_countries=research_data.get('required_countries', ''),
                    session_id=session_id,
                    ai_model=config.GEMINI_MODEL,
                    processing_time=120,  # 2 minutes
                    tokens_used=len(result["report"].split()) * 1.3  # Approximate
                )
            else:  # product research
                title = f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {research_data.get('product_characteristics', '')[:50]}..."
                report = report_service.create_report(
                    title=title,
                    content=result["report"],
                    research_type="product",
                    product_description=research_data.get('product_description', ''),
                    segment=research_data.get('segment', ''),
                    research_element=research_data.get('product_characteristics', ''),
                    benchmarks="",
                    required_players=research_data.get('required_players', ''),
                    required_countries=research_data.get('required_countries', ''),
                    session_id=session_id,
                    ai_model=config.GEMINI_MODEL,
                    processing_time=120,
                    tokens_used=len(result["report"].split()) * 1.3
                )
            
            # Send completion message
            await manager.send_message(client_id, {
                "type": "completion",
                "success": True,
                "report_id": report.id,
                "message": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                "timestamp": datetime.now().isoformat()
            })
            
        else:
            # Send error message
            await manager.send_message(client_id, {
                "type": "completion",
                "success": False,
                "error": result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"),
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "timestamp": datetime.now().isoformat()
            })
            
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}")
        print(f"üìã –î–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:\n{error_details}")
        
        # Send error message
        await manager.send_message(client_id, {
            "type": "completion",
            "success": False,
            "error": str(e),
            "error_details": error_details,
            "message": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "timestamp": datetime.now().isoformat()
        })

@app.post("/generate-report-old")
async def generate_report_old(request: Request, db: Session = Depends(get_db)):
    data = await request.json()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    product_description = data.get('product_description', '')
    segment = data.get('segment', '')
    research_element = data.get('research_element', '')
    benchmarks = data.get('benchmarks', '')
    required_players = data.get('required_players', '')
    required_countries = data.get('required_countries', '')
    
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    product_characteristics = data.get('product_characteristics', '')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    research_type = "feature" if research_element else "product"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Mistral –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    if research_type == "feature":
        prompt = f"""
–†–æ–ª—å

–¢—ã ‚Äî —Å—Ç–∞—Ä—à–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ —Ñ–∏–Ω—Ç–µ—Ö—É/–±–∞–Ω–∫–∞–º/—Å—É–ø–µ—Ä–∞–ø–ø–∞–º. –†–∞–±–æ—Ç–∞–µ—à—å –∫–∞–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Ä—ã–Ω–∫–∞ + UX-—Ä–∞–∑–≤–µ–¥—á–∏–∫: –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—à—å –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—à—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ —Ñ–∏—á–∏ —É –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å –ø—Ä–∏–≥–æ–¥–Ω—ã–µ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è Product Manager.

–¶–µ–ª—å

–°–æ–±—Ä–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏/—Ñ–∏—á–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø—Ä–æ–¥—É–∫—Ç–∞.

–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ –Ω–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (value, —Ä–∏—Å–∫–∏, —É—Å–∏–ª–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è).

–î–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.

–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–¥—Å—Ç–∞–≤—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞)
- –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {product_description}
- –°–µ–≥–º–µ–Ω—Ç: {segment}
- –ß—Ç–æ –∏—Å—Å–ª–µ–¥—É–µ–º (—ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∞): {research_element}
- –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å): {benchmarks}
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å): {required_players}
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å): {required_countries}

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã/–¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π (–ø—Ä–∞–π—Å—ã, —Ä–µ–ª–∏–∑—ã, —Å–ø—Ä–∞–≤–∫–∏, help-—Ü–µ–Ω—Ç—Ä—ã).
- –û—Ç—á—ë—Ç—ã –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞/–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ (–≤ —Ç.—á. UX/UI).
- –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ App Store / Google Play (–æ–ø–∏—Å–∞–Ω–∏—è, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –æ—Ç–∑—ã–≤—ã).
- –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –º–µ–¥–∏–∞/–Ω–æ–≤–æ—Å—Ç–∏, —Ç–µ—Ö-–±–ª–æ–≥–∏ –∫–æ–º–ø–∞–Ω–∏–π.
- –î—Ä—É–≥–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –°–°–´–õ–û–ö:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏
- –ü—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Å–∞–π—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
- –ò–∑–±–µ–≥–∞–π —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞ - –ù–ï –≤–∫–ª—é—á–∞–π –µ—ë
- –õ—É—á—à–µ –º–µ–Ω—å—à–µ —Å—Å—ã–ª–æ–∫, –Ω–æ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º–∏
- –ù–∞ –∫–∞–∂–¥—ã–π —Ñ–∞–∫—Ç –¥–∞–≤–∞–π —Å—Å—ã–ª–∫—É. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–Ω—ã–µ ‚Äî –ø–æ–º–µ—Ç—å ¬´(—Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)¬ª.

–ú–µ—Ç–æ–¥

–°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≥–∏–ø–æ—Ç–µ–∑—ã –ø–æ–ª—å–∑—ã —Ñ–∏—á–∏ –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

–î–µ–ª–∞–π —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/–∏–≥—Ä–æ–∫–∞–º/–∫–µ–π–≤–æ—Ä–¥–∞–º.

–î–ª—è –∫–∞–∂–¥–æ–π —Ñ–∏—á–∏: —Ñ–∏–∫—Å–∏—Ä—É–π –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫, –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.

–ü—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–¥–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞/–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞, –Ω–∞–ª–∏—á–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).

–§–æ—Ä–º–∞—Ç –∏—Ç–æ–≥–æ–≤–æ–π –≤—ã–¥–∞—á–∏
1) Executive Summary (–¥–æ 10 –ø—É–Ω–∫—Ç–æ–≤)

–ß—Ç–æ –Ω–∞—à–ª–∏, –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ, –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ ¬´quick wins¬ª, —Ä–∏—Å–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.

2) 10+ –∫–µ–π—Å–æ–≤ (–ø–æ —à–∞–±–ª–æ–Ω—É, —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–Ω—É–º–µ—Ä—É–π)

–ö–æ–º–ø–∞–Ω–∏—è: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç.

–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ): ...

–°—Ç—Ä–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ...

–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏—á–∏ (4‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π):
‚Äî –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç / –≥–¥–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø—É—Ç–∏.
‚Äî –î–ª—è –∫–æ–≥–æ / –∫–∞–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã.
‚Äî –ú–µ—Ç—Ä–∏–∫–∏/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å, —Å–æ —Å—Å—ã–ª–∫–æ–π).

–°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—É–Ω–∫—Ç–æ–º.

–°–∫—Ä–∏–Ω—à–æ—Ç—ã —Ñ–∏—á–∏: –≤—Å—Ç–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è; –ø–æ–¥–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –Ω–∏—Ö (—ç–∫—Ä–∞–Ω/—à–∞–≥/—Å–æ—Å—Ç–æ—è–Ω–∏–µ).

–ü–µ—Ä–µ–≤–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ RU/EN): –ø–æ–ª–Ω—ã–π, —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –±–ª–æ–∫–∞–º.

4) –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–¥—É–∫—Ç—É

Mapping –∫ –Ω–∞—à–∏–º —Ü–µ–ª—è–º/–º–µ—Ç—Ä–∏–∫–∞–º: –∫–∞–∫–∏–µ north-star/–ø–æ–¥–º–µ—Ç—Ä–∏–∫–∏ –∑–∞–¥–µ–Ω–µ—Ç.

–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∏–∫–∞: AML/KYC, –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∏–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –¥–∞–Ω–Ω—ã–µ/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±—ç–∫–µ/–∫–ª–∏–µ–Ω—Ç–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.

–†–∏—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö —Å–Ω–∏–∂–µ–Ω–∏—è.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É
–ú–∏–Ω–∏–º—É–º 10 –∫–µ–π—Å–æ–≤, –ª—É—á—à–µ 12‚Äì15, –Ω–æ –±–µ–∑ ¬´–≤–æ–¥—ã¬ª.

–í—Å–µ —Ñ–∞–∫—Ç—ã ‚Äî —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∏.

–î–∞—Ç—ã —Ä–µ–ª–∏–∑–æ–≤/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–µ–π—Å–µ.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–°–´–õ–ö–ê–ú:
- –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Å–∞–π—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
- –ò–∑–±–µ–≥–∞–π —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –±–ª–æ–≥–∏ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
- –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞ - –ª—É—á—à–µ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –µ—ë –≤–æ–æ–±—â–µ
- –õ—É—á—à–µ –º–µ–Ω—å—à–µ —Å—Å—ã–ª–æ–∫, –Ω–æ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏
- –ü—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫

–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏; –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–±–∑–æ—Ä—ã/–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫.

–û—Ç–º–µ—á–∞–π –≥–µ–æ-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ–∏—á (–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/—Ä—ã–Ω–∫–∞–º).

–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ –Ω–∞–π–¥–µ–Ω–æ/—Ä–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è¬ª, –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞.

–ß—Ç–æ –∏—Å–∫–ª—é—á–∏—Ç—å

–ì–æ–ª—ã–µ –º–Ω–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.

–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ª–æ–∑—É–Ω–≥–æ–≤ –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ.

–°–∫—Ä–∏–Ω—à–æ—Ç—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

¬´–°–ø–∏—Å–∫–∏ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏¬ª.

–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π (—á–µ–∫-–ª–∏—Å—Ç)

 10+ –∫–µ–π—Å–æ–≤, –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã.

 –í –∫–∞–∂–¥–æ–º –∫–µ–π—Å–µ –µ—Å—Ç—å: —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏, —Å—Ç—Ä–∞–Ω–∞, 4‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ —Ñ–∏—á–µ, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –ø–æ–¥–ø–∏—Å–∏, –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

 –¢–∞–±–ª–∏—Ü–∞ –æ–±–∑–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤.

 –£–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

 –ï—Å—Ç—å —Å–µ–∫—Ü–∏—è ¬´–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å¬ª –∏ ¬´–ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è¬ª.

 –í—Å–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è.

–¢–æ–Ω –∏ —Å—Ç–∏–ª—å

–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π, –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É.

–°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥—ã, –ø–æ—Ç–æ–º –¥–µ—Ç–∞–ª–∏.

–Ø—Å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∏–∑–±–µ–≥–∞–π –∂–∞—Ä–≥–æ–Ω–∞.
"""
    else:  # research_type == "product"
        prompt = f"""
–†–æ–ª—å

–¢—ã ‚Äî —Å—Ç–∞—Ä—à–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ —Ñ–∏–Ω—Ç–µ—Ö—É/–±–∞–Ω–∫–∞–º/—Å—É–ø–µ—Ä–∞–ø–ø–∞–º. –†–∞–±–æ—Ç–∞–µ—à—å –∫–∞–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Ä—ã–Ω–∫–∞ + UX-—Ä–∞–∑–≤–µ–¥—á–∏–∫: –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—à—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å –ø—Ä–∏–≥–æ–¥–Ω—ã–µ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è Product Manager. 

–¶–µ–ª—å

–°–æ–±—Ä–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é Product Manager. 

–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ –Ω–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (value, —Ä–∏—Å–∫–∏, —É—Å–∏–ª–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è).

–î–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏.

–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–¥—Å—Ç–∞–≤—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞)
- –û–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {product_description}
- –°–µ–≥–º–µ–Ω—Ç: {segment}
- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏: {product_characteristics}
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å): {required_players}
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å): {required_countries}

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã/–¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π (–ø—Ä–∞–π—Å—ã, —Ä–µ–ª–∏–∑—ã, —Å–ø—Ä–∞–≤–∫–∏, help-—Ü–µ–Ω—Ç—Ä—ã).
- –û—Ç—á—ë—Ç—ã –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞/–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ (–≤ —Ç.—á. UX/UI).
- –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ App Store / Google Play (–æ–ø–∏—Å–∞–Ω–∏—è, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –æ—Ç–∑—ã–≤—ã).
- –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –º–µ–¥–∏–∞/–Ω–æ–≤–æ—Å—Ç–∏, —Ç–µ—Ö-–±–ª–æ–≥–∏ –∫–æ–º–ø–∞–Ω–∏–π.
- –î—Ä—É–≥–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –°–°–´–õ–û–ö:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏
- –ü—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Å–∞–π—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
- –ò–∑–±–µ–≥–∞–π —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞ - –ù–ï –≤–∫–ª—é—á–∞–π –µ—ë
- –õ—É—á—à–µ –º–µ–Ω—å—à–µ —Å—Å—ã–ª–æ–∫, –Ω–æ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º–∏
- –ù–∞ –∫–∞–∂–¥—ã–π —Ñ–∞–∫—Ç –¥–∞–≤–∞–π —Å—Å—ã–ª–∫—É. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä–Ω—ã–µ ‚Äî –ø–æ–º–µ—Ç—å ¬´(—Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)¬ª.

–ú–µ—Ç–æ–¥

–°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≥–∏–ø–æ—Ç–µ–∑—ã –ø–æ–ª—å–∑—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. 

–î–µ–ª–∞–π —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/–∏–≥—Ä–æ–∫–∞–º/–∫–µ–π–≤–æ—Ä–¥–∞–º.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: —Ñ–∏–∫—Å–∏—Ä—É–π –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫, –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏. 

–ü—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–¥–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞/–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞, –Ω–∞–ª–∏—á–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).

–§–æ—Ä–º–∞—Ç –∏—Ç–æ–≥–æ–≤–æ–π –≤—ã–¥–∞—á–∏
1) Executive Summary (–¥–æ 10 –ø—É–Ω–∫—Ç–æ–≤)

–ß—Ç–æ –Ω–∞—à–ª–∏, –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ, –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ ¬´quick wins¬ª, —Ä–∏—Å–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.

2) 10+ –∫–µ–π—Å–æ–≤ (–ø–æ —à–∞–±–ª–æ–Ω—É, —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–Ω—É–º–µ—Ä—É–π)

–ö–æ–º–ø–∞–Ω–∏—è: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç.

–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ): ...

–°—Ç—Ä–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ...

–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (4‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π): 
‚Äî –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç / –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω UX/UI 
‚Äî –î–ª—è –∫–æ–≥–æ / –∫–∞–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã.
‚Äî –ú–µ—Ç—Ä–∏–∫–∏/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å, —Å–æ —Å—Å—ã–ª–∫–æ–π).

–°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—É–Ω–∫—Ç–æ–º.

–°–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞: –≤—Å—Ç–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è; –ø–æ–¥–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –Ω–∏—Ö (—ç–∫—Ä–∞–Ω/—à–∞–≥/—Å–æ—Å—Ç–æ—è–Ω–∏–µ). 

–ü–µ—Ä–µ–≤–æ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ RU/EN): –ø–æ–ª–Ω—ã–π, —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –±–ª–æ–∫–∞–º.

4) –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ –Ω–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É

Mapping –∫ –Ω–∞—à–∏–º —Ü–µ–ª—è–º/–º–µ—Ç—Ä–∏–∫–∞–º: –∫–∞–∫–∏–µ north-star/–ø–æ–¥–º–µ—Ç—Ä–∏–∫–∏ –∑–∞–¥–µ–Ω–µ—Ç.

–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–≥—É–ª—è—Ç–æ—Ä–∏–∫–∞: AML/KYC, –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∏–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –¥–∞–Ω–Ω—ã–µ/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±—ç–∫–µ/–∫–ª–∏–µ–Ω—Ç–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.

–†–∏—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö —Å–Ω–∏–∂–µ–Ω–∏—è.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É
–ú–∏–Ω–∏–º—É–º 10 –∫–µ–π—Å–æ–≤, –ª—É—á—à–µ 12‚Äì15, –Ω–æ –±–µ–∑ ¬´–≤–æ–¥—ã¬ª.

–í—Å–µ —Ñ–∞–∫—Ç—ã ‚Äî —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∏.

–î–∞—Ç—ã —Ä–µ–ª–∏–∑–æ–≤/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–∞–∂–¥–æ–º –∫–µ–π—Å–µ.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–°–´–õ–ö–ê–ú:
- –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Å–∞–π—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
- –ò–∑–±–µ–≥–∞–π —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –±–ª–æ–≥–∏ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
- –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞ - –ª—É—á—à–µ –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –µ—ë –≤–æ–æ–±—â–µ
- –õ—É—á—à–µ –º–µ–Ω—å—à–µ —Å—Å—ã–ª–æ–∫, –Ω–æ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏
- –ü—Ä–æ–≤–µ—Ä—è–π –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫ (–Ω–µ —Å—Ç–∞—Ä—à–µ 2 –ª–µ—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)

–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏; –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–±–∑–æ—Ä—ã/–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏ –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫.

–û—Ç–º–µ—á–∞–π –≥–µ–æ-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ —Å—Ç—Ä–∞–Ω–∞–º/—Ä—ã–Ω–∫–∞–º). 

–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å, —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ –Ω–∞–π–¥–µ–Ω–æ/—Ä–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è¬ª, –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞.

–ß—Ç–æ –∏—Å–∫–ª—é—á–∏—Ç—å

–ì–æ–ª—ã–µ –º–Ω–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.

–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –ª–æ–∑—É–Ω–≥–æ–≤ –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥—É–∫—Ç–µ.

–°–∫—Ä–∏–Ω—à–æ—Ç—ã –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

¬´–°–ø–∏—Å–∫–∏ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏¬ª.

–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π (—á–µ–∫-–ª–∏—Å—Ç)

 10+ –∫–µ–π—Å–æ–≤, –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã.

 –í –∫–∞–∂–¥–æ–º –∫–µ–π—Å–µ –µ—Å—Ç—å: —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏, —Å—Ç—Ä–∞–Ω–∞, 4‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –ø–æ–¥–ø–∏—Å–∏, –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. 

 –¢–∞–±–ª–∏—Ü–∞ –æ–±–∑–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤.

 –£–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

 –ï—Å—Ç—å —Å–µ–∫—Ü–∏—è ¬´–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å¬ª –∏ ¬´–ü–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è¬ª.

 –í—Å–µ —Å—Å—ã–ª–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è.

–¢–æ–Ω –∏ —Å—Ç–∏–ª—å

–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π, –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É.

–°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥—ã, –ø–æ—Ç–æ–º –¥–µ—Ç–∞–ª–∏.

–Ø—Å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∏–∑–±–µ–≥–∞–π –∂–∞—Ä–≥–æ–Ω–∞.
"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API
    async with httpx.AsyncClient(timeout=600.0) as client:  # 10 minutes for HTTP requests
        response = await client.post(
            config.GEMINI_API_URL,
            headers={
                "Content-Type": "application/json"
            },
            params={
                "key": config.GEMINI_API_KEY
            },
            json={
                "contents": [
                    {
                        "parts": [
                            {
                                "text": prompt
                            }
                        ]
                    }
                ],
                "generationConfig": {
                    "temperature": 0.7,
                    "topP": 0.8,
                    "topK": 40
                }
            }
        )
        
        if response.status_code == 200:
            result = response.json()
            report_content = result["candidates"][0]["content"]["parts"][0]["text"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            report_service = ReportService(db)
            session_manager = SessionManager(db)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session_id = request.cookies.get("session_id")
            if not session_id:
                session_id = session_manager.create_session(
                    ip_address=request.client.host,
                    user_agent=request.headers.get("user-agent")
                )
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            if research_type == "feature":
                title = f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {research_element}"
                report = report_service.create_report(
                    title=title,
                    content=report_content,
                    research_type="feature",
                    product_description=product_description,
                    segment=segment,
                    research_element=research_element,
                    benchmarks=benchmarks,
                    required_players=required_players,
                    required_countries=required_countries,
                    session_id=session_id,
                    ai_model=config.GEMINI_MODEL,
                    processing_time=30,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                    tokens_used=len(report_content.split())  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                )
            else:  # research_type == "product"
                title = f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_characteristics[:50]}..."
                report = report_service.create_report(
                    title=title,
                    content=report_content,
                    research_type="product",
                    product_description=product_description,
                    segment=segment,
                    research_element=product_characteristics,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                    benchmarks="",  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è product
                    required_players=required_players,
                    required_countries=required_countries,
                    session_id=session_id,
                    ai_model=config.GEMINI_MODEL,
                    processing_time=30,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                    tokens_used=len(report_content.split())  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                )
            
            return {
                "success": True,
                "report": report_content,
                "report_id": report.id,
                "timestamp": datetime.now().isoformat()
            }
        else:
            return {
                "success": False,
                "error": f"API Error: {response.status_code}",
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"
            }

@app.websocket("/ws/{client_id}")
async def websocket_endpoint(websocket: WebSocket, client_id: str):
    print(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
    await manager.connect(websocket, client_id)
    try:
        while True:
            data = await websocket.receive_text()
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {client_id}: {data}")
            # Handle incoming messages if needed
    except WebSocketDisconnect:
        print(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
        manager.disconnect(client_id)

@app.get("/status/{client_id}")
async def check_status(client_id: str):
    """Check status of research process"""
    if client_id in manager.active_connections:
        return {
            "status": "active",
            "message": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        }
    else:
        return {
            "status": "inactive", 
            "message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ"
        }

@app.get("/results", response_class=HTMLResponse)
async def results_page(request: Request, report_id: int = None, db: Session = Depends(get_db)):
    report_content = ""
    report_title = "–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    if report_id:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        report_service = ReportService(db)
        report = report_service.get_report(report_id)
        if report:
            report_content = report.content
            report_title = report.title
        else:
            report_content = "–û—Ç—á–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω."
    else:
        # –ü–æ–ª—É—á–∞–µ–º report –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        report = request.query_params.get("report", "")
        report_content = report
        report_title = "–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
    
    return templates.TemplateResponse("results.html", {
        "request": request,
        "report": report_content,
        "report_id": report_id,
        "report_title": report_title
    })

@app.get("/reports")
async def get_reports(request: Request, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤"""
    report_service = ReportService(db)
    session_id = request.cookies.get("session_id")
    
    if session_id:
        reports = report_service.get_reports_by_session(session_id)
    else:
        reports = report_service.get_recent_reports(10)
    
    return {
        "reports": [
            {
                "id": report.id,
                "title": report.title,
                "research_type": report.research_type,
                "created_at": report.created_at.isoformat(),
                "research_element": report.research_element
            }
            for report in reports
        ]
    }

@app.get("/reports/{report_id}")
async def get_report(report_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç—á–µ—Ç"""
    report_service = ReportService(db)
    report = report_service.get_report(report_id)
    
    if not report:
        raise HTTPException(status_code=404, detail="Report not found")
    
    return {
        "id": report.id,
        "title": report.title,
        "content": report.content,
        "research_type": report.research_type,
        "created_at": report.created_at.isoformat(),
        "research_element": report.research_element,
        "segment": report.segment,
        "benchmarks": report.benchmarks,
        "required_players": report.required_players,
        "required_countries": report.required_countries
    }

@app.delete("/reports/{report_id}")
async def delete_report(report_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç"""
    report_service = ReportService(db)
    success = report_service.delete_report(report_id)
    
    if not success:
        raise HTTPException(status_code=404, detail="Report not found")
    
    return {"message": "Report deleted successfully"}

@app.post("/export-pdf")
async def export_pdf(request: Request):
    data = await request.json()
    report_content = data.get("report", "")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    return {
        "success": True,
        "message": "PDF —ç–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω",
        "content": report_content
    }
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app,
        host="127.0.0.1",  # –∑–∞ Nginx –ª—É—á—à–µ —Å–ª—É—à–∞—Ç—å —Ç–æ–ª—å–∫–æ loopback
        port=8000,
        proxy_headers=True,
        forwarded_allow_ips="*",
        ws="websockets",
        ws_ping_interval=20,
        ws_ping_timeout=20,
        # –í–ê–ñ–ù–û: –ø–æ–∫–∞ –¥–µ—Ä–∂–∏—Ç–µ –æ–¥–∏–Ω –≤–æ—Ä–∫–µ—Ä (—á–µ—Ä–µ–∑ run —ç—Ç–æ –≤—Å–µ–≥–¥–∞ 1)
    )